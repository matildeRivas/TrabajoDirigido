import psycopg2
from psycopg2.extensions import AsIs
import sys
import pprint
from config import config
from queries import *

def main(argv):
	connect(sys.argv[1])

#Connects to database using credentials obtained with config
def connect(tableToInsersect):
	conn = None
	try:
        # read connection parameters
		params = config()
        # connect to the PostgreSQL server
		print('Connecting to the PostgreSQL database')
		conn = psycopg2.connect(**params)
		print('Connected!\n')
		# create a cursor
		cursor = conn.cursor()
		# conn.cursor will return a cursor object, you can use this cursor to perform queries
		cursor = conn.cursor()
		# execute queries to find intersections
		intersectionsQueries(cursor, tableToInsersect)
		# close communication with the PostgreSQL database server
		cursor.close()
		# commit the changes
		print("commited")
		conn.commit()
	except (Exception, psycopg2.DatabaseError) as error:
		print(error)
	finally:
		if conn is not None:
			conn.close()
	

#Executes a query in a database, query is a string
def executeQuery(cursor, query):
	# execute our Query
	cursor.execute(query)
 
	# retrieve the records from the database
	records = cursor.fetchall()
 
	# print out the records using pretty print
	pprint.pprint(records)


def processPoints(points):
	data = {}
	for i in points:
		a = i[3] - i[1] #B.y - A.y
		b = i[0] - i[2] #A.x - B.x
		c = a*i[0] + b*i[1] #a*A.x + b*A.y
		segment = {}
		segment["origin_id"]=i[4]
		segment["id"]=i[5]
		segment["x1"]=i[0]
		segment["y1"]=i[1]
		segment["x2"]=i[2]
		segment["y2"]=i[3]
		segment["A"]=a
		segment["B"]=b
		segment["C"]=c
		data[i[5]]=segment
		with open('data.txt', 'w') as f:
			print(data, file=f)
	return data


def findIntersections(segments, cursor, tableName):
	for (L1, v1) in segments.items():
		for (L2, v2) in segments.items():
			if(v1["id"]>v2["id"]):
				D = v1["A"]*v2["B"] - v1["B"]*v2["A"]
				# hay interseccion
				if D != 0:	
					Dx = v1["C"] * v2["B"] - v1["B"] * v2["C"]
					Dy = v1["A"] * v2["C"] - v1["C"] * v2["A"]
					x = Dx/D
					y = Dy/D
					#(x float, y float, geom geometry, origin_a int, origin_b int);")
					if(within(x, v1["x1"], v1["x2"]) and within(y, v1["y1"], v1["y2"]) and within(x, v2["x1"], v2["x2"]) and within(y, v2["y1"], v2["y2"])):
						cursor.execute("INSERT INTO %s VALUES(%s, %s, ST_Point(%s, %s), %s, %s);", ( AsIs(tableName), x, y, x, y, v1["origin_id"], v2["origin_id"]))
						print(cursor.statusmessage)
				# no hay interseccion
				else:
					pass



def within(p, a, b):
	return a <= p <= b or b <= p <= a


#Finds all intersections in a map
def intersectionsQueries(cursor, mapName):
	# Convert map to points, save it into table called "mapName_points"
	# create new table "mapName_points"
	newTableName = mapName + "_points"
	cursor.execute("create table "+newTableName+" (x1 float, y1 float, x2 float, y2 float, origin_id int);")
	# get all points truncated to 5 decimals
	cursor.execute("with line_counts (cts, id) as (select ST_NPoints(geom) - 1, id from %s), series(num, id) as "\
	+"(select generate_series(1, cts), id from line_counts) insert into %s select distinct "\
	+" trunc(ST_X(ST_PointN(geom, num))::numeric, 5) as x1, trunc(ST_Y(ST_PointN(geom, num))::numeric, 5) as y1, "\
	+" trunc(ST_X(ST_PointN(geom, num+1))::numeric, 5) as x2, trunc(ST_Y(ST_PointN(geom, num+1))::numeric, 5) as y2,"\
	+" %s.id as origin_id from series inner join %s on series.id = %s.id;", (AsIs(mapName), AsIs(newTableName), AsIs(mapName), AsIs(mapName), AsIs(mapName)))
	# filter duplicates and save result in table called "filtered_newTableName"
	print(cursor.statusmessage)
	filteredTableName = "filtered_"+newTableName
	cursor.execute("create table %s as select distinct on (x1, y1, x2, y2) * from %s;", (AsIs(filteredTableName), AsIs(newTableName)))
	# add index to table
	print(cursor.statusmessage)
	cursor.execute("alter table "+filteredTableName+" add id int generated by default as identity primary key;")
	# create intersections table
	intersectionsName = mapName+"_intersections"
	cursor.execute("create table "+intersectionsName+" (x float, y float, geom geometry, origin_a int, origin_b int, id int generated by default as identity primary key);")
	cursor.execute("select * from "+filteredTableName+";")
	print(cursor.statusmessage)
	points = cursor.fetchall()
	pprint.pprint(points)
	pointsDict = processPoints(points)
	findIntersections(pointsDict, cursor, intersectionsName)
	cursor.execute("drop table %s; drop table %s;", ( AsIs(newTableName), AsIs(filteredTableName)))


if __name__ == "__main__":
	main(sys.argv)

