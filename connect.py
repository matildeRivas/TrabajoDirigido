import psycopg2
import sys
import pprint
from config import config
from queries import *

def main(argv):
	connect(sys.argv[1])

#Connects to database using credentials obtained with config
def connect(tableToInsersect):
	conn = None
	try:
        # read connection parameters
		params = config()
        # connect to the PostgreSQL server
		print('Connecting to the PostgreSQL database')
		conn = psycopg2.connect(**params)
		print('Connected!\n')
		# create a cursor
		cursor = conn.cursor()
		# conn.cursor will return a cursor object, you can use this cursor to perform queries
		cursor = conn.cursor()
		# execute queries to find intersections
		findIntersections(cursor, tableToInsersect)
		# close communication with the PostgreSQL database server
		cursor.close()
		# commit the changes
		conn.commit()
	except (Exception, psycopg2.DatabaseError) as error:
		print(error)
	finally:
		if conn is not None:
			conn.close()
	

#Executes a query in a database, query is a string
def executeQuery(cursor, query):
	# execute our Query
	cursor.execute(query)
 
	# retrieve the records from the database
	records = cursor.fetchall()
 
	# print out the records using pretty print
	pprint.pprint(records)


#Finds all intersections in a map
def findIntersections(cursor, mapName):
	# Segmentize given map, save it into table called "segmentized_mapName"
	# create new table "segmentized_mapName"
	newTableName = "segmentized_" + mapName
	cursor.execute("create table " + newTableName + " (geom geometry, origin_id int, id int generated by default as identity primary key);")
	cursor.execute( "with line_counts (cts, id) as (select ST_NPoints(geom) -1, id from "+mapName+"), series(num, id) as (select generate_series(1, cts), id from line_counts) insert into "+newTableName+" select distinct ST_MakeLine(ST_PointN(geom, num), ST_PointN(geom, num+1)) as geom, "+mapName+".id from series inner join "+mapName+" on series.id = "+mapName+".id;")
	# truncate points to 4 decimals
	# delete 
	# create geometrical index on segmentized table
	# create intersections table
	# run intersections query 
	# for every intersection, split line in segmentized map

if __name__ == "__main__":
	main(sys.argv)

